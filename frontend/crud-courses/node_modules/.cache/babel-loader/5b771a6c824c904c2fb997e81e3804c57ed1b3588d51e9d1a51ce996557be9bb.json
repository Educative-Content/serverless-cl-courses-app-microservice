{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nexport default function useFetch(queryField, queryAttributesStr) {\n  _s();\n  // Declaring the essential state variables for data and checking\n  // if the request is loading or succeeded\n  const [data, setData] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const controller = new AbortController();\n  useEffect(() => {\n    // Changing loading and success state to true whenever there's an effect\n    setLoading(true);\n    setSuccess(false);\n    const response = \"\";\n\n    // Extracting data from queryAttributesStr\n    const queryAttributes = JSON.parse(queryAttributesStr);\n\n    // asynchronous function to make API call\n    async function fetchData() {\n      try {\n        const signal = controller.signal;\n        axios.get(\"http://localhost:3002/api/get\", {\n          signal: signal\n        }).then(response => {\n          response = response;\n          setData(response.data);\n        });\n        console.log(\"svycd\", response);\n        // Checking if the request was a success\n        if (response.status == 200) {\n          setSuccess(true);\n        } else {\n          if (response.errorMessage) {\n            throw new Error(`Status Code: Internal Error\\nError Message: ${response.errorMessage}`);\n          } else if (!response.bodyUsed) {\n            throw new Error(`Status Code: ${response.status}\\nError Message: ${response.statusText}`);\n          } else {\n            const errorResponse = await response.json();\n            throw new Error(`Status Code: ${response.status}\\nAPI Error Message: ${errorResponse.message}`);\n          }\n        }\n      } catch (error) {\n        console.log(error.message);\n        setData({\n          error: `${error}`\n        });\n        setSuccess(false);\n      } finally {\n        // Changing loading state to false whenever the API request ends in success or failure\n        setLoading(false);\n      }\n    }\n\n    // Making sure that a null field is not passed\n    if (queryField) {\n      fetchData();\n    } else {\n      setLoading(false);\n      setSuccess(true);\n    }\n\n    // Cancelling the fetch request in case the user navigates\n    // away from screen\n    return () => {\n      controller.abort();\n    };\n\n    // Defining variables that trigger useFetch\n  }, [queryField, queryAttributesStr]);\n\n  // Returning useFetch response\n  return {\n    data,\n    success,\n    loading\n  };\n}\n_s(useFetch, \"WV32FdFC8Rv4uoPGAXVf2am2g6g=\");","map":{"version":3,"names":["useState","useEffect","axios","useFetch","queryField","queryAttributesStr","_s","data","setData","success","setSuccess","loading","setLoading","controller","AbortController","response","queryAttributes","JSON","parse","fetchData","signal","get","then","console","log","status","errorMessage","Error","bodyUsed","statusText","errorResponse","json","message","error","abort"],"sources":["/Users/Zainab/Desktop/MicroservicesLab/CRUDCourses/frontend/crud-courses/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios'\n\n\nexport default function useFetch(queryField, queryAttributesStr) {\n  // Declaring the essential state variables for data and checking\n  // if the request is loading or succeeded\n  const [data, setData] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  const controller = new AbortController();\n\n  useEffect(() => {\n    // Changing loading and success state to true whenever there's an effect\n    setLoading(true);\n    setSuccess(false);\n\n    const response = \"\";\n\n    // Extracting data from queryAttributesStr\n    const queryAttributes = JSON.parse(queryAttributesStr);\n\n    // asynchronous function to make API call\n    async function fetchData() {\n      try {\n        const signal = controller.signal;\n        axios.get(\"http://localhost:3002/api/get\", { signal: signal}).then((response)=>{\n            \n            response = response\n            setData(response.data)\n        });\n\n        console.log(\"svycd\", response)\n        // Checking if the request was a success\n        if (response.status == 200){\n            setSuccess(true);\n        }\n        else{\n            if (response.errorMessage) {\n            throw new Error(`Status Code: Internal Error\\nError Message: ${response.errorMessage}`);\n          } else if (!response.bodyUsed) {\n            throw new Error(`Status Code: ${response.status}\\nError Message: ${response.statusText}`);\n          } else {\n            const errorResponse = await response.json();\n            throw new Error(`Status Code: ${response.status}\\nAPI Error Message: ${errorResponse.message}`);\n          }\n        }\n      } catch (error) {\n        console.log(error.message);\n        setData({ error: `${error}` });\n        setSuccess(false);\n      } finally {\n        // Changing loading state to false whenever the API request ends in success or failure\n        setLoading(false);\n      }\n    }\n\n    // Making sure that a null field is not passed\n    if (queryField) {\n      fetchData();\n    } else {\n      setLoading(false);\n      setSuccess(true);\n    }\n\n    // Cancelling the fetch request in case the user navigates\n    // away from screen\n    return () => {\n      controller.abort();\n    };\n\n  // Defining variables that trigger useFetch\n  }, [queryField, queryAttributesStr]);\n\n  // Returning useFetch response\n  return { data, success, loading };\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAGzB,eAAe,SAASC,QAAQA,CAACC,UAAU,EAAEC,kBAAkB,EAAE;EAAAC,EAAA;EAC/D;EACA;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMa,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;EAExCb,SAAS,CAAC,MAAM;IACd;IACAW,UAAU,CAAC,IAAI,CAAC;IAChBF,UAAU,CAAC,KAAK,CAAC;IAEjB,MAAMK,QAAQ,GAAG,EAAE;;IAEnB;IACA,MAAMC,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACb,kBAAkB,CAAC;;IAEtD;IACA,eAAec,SAASA,CAAA,EAAG;MACzB,IAAI;QACF,MAAMC,MAAM,GAAGP,UAAU,CAACO,MAAM;QAChClB,KAAK,CAACmB,GAAG,CAAC,+BAA+B,EAAE;UAAED,MAAM,EAAEA;QAAM,CAAC,CAAC,CAACE,IAAI,CAAEP,QAAQ,IAAG;UAE3EA,QAAQ,GAAGA,QAAQ;UACnBP,OAAO,CAACO,QAAQ,CAACR,IAAI,CAAC;QAC1B,CAAC,CAAC;QAEFgB,OAAO,CAACC,GAAG,CAAC,OAAO,EAAET,QAAQ,CAAC;QAC9B;QACA,IAAIA,QAAQ,CAACU,MAAM,IAAI,GAAG,EAAC;UACvBf,UAAU,CAAC,IAAI,CAAC;QACpB,CAAC,MACG;UACA,IAAIK,QAAQ,CAACW,YAAY,EAAE;YAC3B,MAAM,IAAIC,KAAK,CAAE,+CAA8CZ,QAAQ,CAACW,YAAa,EAAC,CAAC;UACzF,CAAC,MAAM,IAAI,CAACX,QAAQ,CAACa,QAAQ,EAAE;YAC7B,MAAM,IAAID,KAAK,CAAE,gBAAeZ,QAAQ,CAACU,MAAO,oBAAmBV,QAAQ,CAACc,UAAW,EAAC,CAAC;UAC3F,CAAC,MAAM;YACL,MAAMC,aAAa,GAAG,MAAMf,QAAQ,CAACgB,IAAI,CAAC,CAAC;YAC3C,MAAM,IAAIJ,KAAK,CAAE,gBAAeZ,QAAQ,CAACU,MAAO,wBAAuBK,aAAa,CAACE,OAAQ,EAAC,CAAC;UACjG;QACF;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdV,OAAO,CAACC,GAAG,CAACS,KAAK,CAACD,OAAO,CAAC;QAC1BxB,OAAO,CAAC;UAAEyB,KAAK,EAAG,GAAEA,KAAM;QAAE,CAAC,CAAC;QAC9BvB,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,SAAS;QACR;QACAE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF;;IAEA;IACA,IAAIR,UAAU,EAAE;MACde,SAAS,CAAC,CAAC;IACb,CAAC,MAAM;MACLP,UAAU,CAAC,KAAK,CAAC;MACjBF,UAAU,CAAC,IAAI,CAAC;IAClB;;IAEA;IACA;IACA,OAAO,MAAM;MACXG,UAAU,CAACqB,KAAK,CAAC,CAAC;IACpB,CAAC;;IAEH;EACA,CAAC,EAAE,CAAC9B,UAAU,EAAEC,kBAAkB,CAAC,CAAC;;EAEpC;EACA,OAAO;IAAEE,IAAI;IAAEE,OAAO;IAAEE;EAAQ,CAAC;AACnC;AAACL,EAAA,CAzEuBH,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}
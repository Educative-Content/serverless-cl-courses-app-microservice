{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nexport default function useFetch(queryField, queryAttributesStr) {\n  _s();\n  // Declaring the essential state variables for data and checking\n  // if the request is loading or succeeded\n  const [data, setData] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const controller = new AbortController();\n  useEffect(() => {\n    // Changing loading and success state to true whenever there's an effect\n    setLoading(true);\n    setSuccess(false);\n\n    // Extracting data from queryAttributesStr\n    const queryAttributes = JSON.parse(queryAttributesStr);\n    function CRUDOperations(requestField, inputData, signal) {\n      if (requestField === 'addCourse') {\n        const response = axios.get('http://localhost:3002/api/create/?input=${inputData}', {\n          signal\n        });\n        if (response.status === 200) {\n          alert(\"Course Added Successfully!\");\n        } else {\n          alert(\"Action Failed.\");\n        }\n      }\n      if (requestField === 'editCourse') {\n        const response = axios.get('http://localhost:3002/api/update/?input=${inputData}', {\n          signal\n        });\n        if (response.status === 200) {\n          alert(\"Course Updated Successfully!\");\n        } else {\n          alert(\"Action Failed.\");\n        }\n      }\n      if (requestField === 'removeCourse') {\n        const response = axios.get('http://localhost:3002/api/update/?input=${inputData}', {\n          signal\n        });\n        if (response.status === 200) {\n          alert(\"Course Removed Successfully!\");\n        } else {\n          alert(\"Action Failed.\");\n        }\n      }\n    }\n\n    // asynchronous function to make API call\n    async function fetchData() {\n      try {\n        const my_sql_url = getURLQuery(queryField, queryAttributes);\n        const signal = controller.signal;\n        const response = await axios.get(my_sql_url, {\n          signal\n        });\n\n        // Checking if the request was a success\n        if (response.status === 200) {\n          setSuccess(true);\n          setData(response); // Storing response data\n        } else {\n          const errorMessage = response.data.errorMessage || response.data.statusText;\n          throw new Error(`Status Code: ${response.status}\\nError Message: ${errorMessage}`);\n        }\n      } catch (error) {\n        console.error(error.message);\n        setData({\n          error: error.message\n        });\n        setSuccess(false);\n      } finally {\n        // Changing loading state to false whenever the API request ends in success or failure\n        setLoading(false);\n      }\n    }\n\n    // Making sure that a null field is not passed\n    if (queryField) {\n      fetchData();\n    } else {\n      setLoading(false);\n      setSuccess(true);\n    }\n\n    // Cancelling the fetch request in case the user navigates\n    // away from the screen\n    return () => {\n      controller.abort();\n    };\n\n    // Defining variables that trigger useFetch\n  }, [queryField, queryAttributesStr]);\n\n  // Returning useFetch response\n  return {\n    data,\n    success,\n    loading\n  };\n}\n_s(useFetch, \"WV32FdFC8Rv4uoPGAXVf2am2g6g=\");","map":{"version":3,"names":["useState","useEffect","axios","useFetch","queryField","queryAttributesStr","_s","data","setData","success","setSuccess","loading","setLoading","controller","AbortController","queryAttributes","JSON","parse","CRUDOperations","requestField","inputData","signal","response","get","status","alert","fetchData","my_sql_url","getURLQuery","errorMessage","statusText","Error","error","console","message","abort"],"sources":["/Users/Zainab/Desktop/MicroservicesLab/CRUDCourses/frontend/crud-courses/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport default function useFetch(queryField, queryAttributesStr) {\n  // Declaring the essential state variables for data and checking\n  // if the request is loading or succeeded\n  const [data, setData] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  const controller = new AbortController();\n\n  useEffect(() => {\n    // Changing loading and success state to true whenever there's an effect\n    setLoading(true);\n    setSuccess(false);\n\n    // Extracting data from queryAttributesStr\n    const queryAttributes = JSON.parse(queryAttributesStr);\n\n    function CRUDOperations(requestField, inputData, signal){\n        if (requestField === 'addCourse'){\n            const response = axios.get('http://localhost:3002/api/create/?input=${inputData}', { signal });\n            if (response.status === 200){\n                alert(\"Course Added Successfully!\");\n            }\n            else {\n                alert(\"Action Failed.\")\n            }\n        }\n        if (requestField === 'editCourse'){\n            const response = axios.get('http://localhost:3002/api/update/?input=${inputData}', { signal });\n            if (response.status === 200){\n                alert(\"Course Updated Successfully!\");\n            }\n            else {\n                alert(\"Action Failed.\")\n            }\n        }\n        if (requestField === 'removeCourse'){\n            const response = axios.get('http://localhost:3002/api/update/?input=${inputData}', { signal });\n            if (response.status === 200){\n                alert(\"Course Removed Successfully!\");\n            }\n            else {\n                alert(\"Action Failed.\")\n            }\n        }\n    }\n\n    // asynchronous function to make API call\n    async function fetchData() {\n      try {\n        const my_sql_url = getURLQuery(queryField, queryAttributes)\n        const signal = controller.signal;\n        const response = await axios.get(my_sql_url, { signal });\n\n        // Checking if the request was a success\n        if (response.status === 200) {\n          setSuccess(true);\n          setData(response); // Storing response data\n        } else {\n          const errorMessage = response.data.errorMessage || response.data.statusText;\n          throw new Error(`Status Code: ${response.status}\\nError Message: ${errorMessage}`);\n        }\n      } catch (error) {\n        console.error(error.message);\n        setData({ error: error.message });\n        setSuccess(false);\n      } finally {\n        // Changing loading state to false whenever the API request ends in success or failure\n        setLoading(false);\n      }\n    }\n\n    // Making sure that a null field is not passed\n    if (queryField) {\n      fetchData();\n    } else {\n      setLoading(false);\n      setSuccess(true);\n    }\n\n    // Cancelling the fetch request in case the user navigates\n    // away from the screen\n    return () => {\n      controller.abort();\n    };\n\n    // Defining variables that trigger useFetch\n  }, [queryField, queryAttributesStr]);\n\n  // Returning useFetch response\n  return { data, success, loading };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nexport default function useFetch(queryField, queryAttributesStr) {\n  _s();\n  // Declaring the essential state variables for data and checking\n  // if the request is loading or succeeded\n  const [data, setData] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const controller = new AbortController();\n  useEffect(() => {\n    // Changing loading and success state to true whenever there's an effect\n    setLoading(true);\n    setSuccess(false);\n\n    // Extracting data from queryAttributesStr\n    const queryAttributes = JSON.parse(queryAttributesStr);\n    function getURLQuery(requestField, inputData) {\n      const id = Math.floor(Math.random() * (999999 - 100 + 1) + 100);\n      switch (requestField) {\n        case 'getCourse':\n          return `http://localhost:3002/api/?action=${requestField}&id=${inputData.id}`;\n        case 'addCourse':\n          return `http://localhost:3002/api/create/?action=${requestField}`;\n        case 'editCourse':\n          return ``;\n        case 'removeCourse':\n          return ``;\n        case 'allCourses':\n          return `http://localhost:3002/api/get`;\n        default:\n          return '';\n      }\n    }\n\n    // asynchronous function to make API call\n    async function fetchData() {\n      try {\n        if (queryField === 'addCourse') {\n          const response = await axios.get('http://localhost:3002/api/create/?data=${queryAttributes}', {\n            signal\n          });\n          if (response.status == !200) {\n            setData({\n              error: error.message\n            });\n            setSuccess(false);\n            setLoading(false);\n          }\n        }\n        const my_sql_url = getURLQuery(queryField, queryAttributes);\n        const signal = controller.signal;\n        const response = await axios.get(my_sql_url, {\n          signal\n        });\n\n        // Checking if the request was a success\n        if (response.status === 200) {\n          setSuccess(true);\n          setData(response); // Storing response data\n        } else {\n          const errorMessage = response.data.errorMessage || response.data.statusText;\n          throw new Error(`Status Code: ${response.status}\\nError Message: ${errorMessage}`);\n        }\n      } catch (error) {\n        console.error(error.message);\n        setData({\n          error: error.message\n        });\n        setSuccess(false);\n      } finally {\n        // Changing loading state to false whenever the API request ends in success or failure\n        setLoading(false);\n      }\n    }\n\n    // Making sure that a null field is not passed\n    if (queryField) {\n      fetchData();\n    } else {\n      setLoading(false);\n      setSuccess(true);\n    }\n\n    // Cancelling the fetch request in case the user navigates\n    // away from the screen\n    return () => {\n      controller.abort();\n    };\n\n    // Defining variables that trigger useFetch\n  }, [queryField, queryAttributesStr]);\n\n  // Returning useFetch response\n  return {\n    data,\n    success,\n    loading\n  };\n}\n_s(useFetch, \"WV32FdFC8Rv4uoPGAXVf2am2g6g=\");","map":{"version":3,"names":["useState","useEffect","axios","useFetch","queryField","queryAttributesStr","_s","data","setData","success","setSuccess","loading","setLoading","controller","AbortController","queryAttributes","JSON","parse","getURLQuery","requestField","inputData","id","Math","floor","random","fetchData","response","get","signal","status","error","message","my_sql_url","errorMessage","statusText","Error","console","abort"],"sources":["/Users/Zainab/Desktop/MicroservicesLab/CRUDCourses/frontend/crud-courses/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport default function useFetch(queryField, queryAttributesStr) {\n  // Declaring the essential state variables for data and checking\n  // if the request is loading or succeeded\n  const [data, setData] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  const controller = new AbortController();\n\n  useEffect(() => {\n    // Changing loading and success state to true whenever there's an effect\n    setLoading(true);\n    setSuccess(false);\n\n    // Extracting data from queryAttributesStr\n    const queryAttributes = JSON.parse(queryAttributesStr);\n\n    function getURLQuery(requestField, inputData) {\n        const id = Math.floor(Math.random() * (999999 - 100 + 1) + 100);\n        switch (requestField) {\n          case 'getCourse':\n            return `http://localhost:3002/api/?action=${requestField}&id=${inputData.id}`;\n          case 'addCourse':\n            return `http://localhost:3002/api/create/?action=${requestField}`;\n          case 'editCourse':\n            return ``;\n          case 'removeCourse':\n            return ``;\n          case 'allCourses':\n            return `http://localhost:3002/api/get`;\n          default:\n            return '';\n        }\n      }\n\n    // asynchronous function to make API call\n    async function fetchData() {\n      try {\n        if (queryField === 'addCourse')\n        {\n            const response = await axios.get('http://localhost:3002/api/create/?data=${queryAttributes}', { signal });\n            if (response.status ==! 200)\n            {\n                setData({ error: error.message });\n                setSuccess(false);\n                setLoading(false);\n            }\n        }\n        const my_sql_url = getURLQuery(queryField, queryAttributes)\n        const signal = controller.signal;\n        const response = await axios.get(my_sql_url, { signal });\n\n        // Checking if the request was a success\n        if (response.status === 200) {\n          setSuccess(true);\n          setData(response); // Storing response data\n        } else {\n          const errorMessage = response.data.errorMessage || response.data.statusText;\n          throw new Error(`Status Code: ${response.status}\\nError Message: ${errorMessage}`);\n        }\n      } catch (error) {\n        console.error(error.message);\n        setData({ error: error.message });\n        setSuccess(false);\n      } finally {\n        // Changing loading state to false whenever the API request ends in success or failure\n        setLoading(false);\n      }\n    }\n\n    // Making sure that a null field is not passed\n    if (queryField) {\n      fetchData();\n    } else {\n      setLoading(false);\n      setSuccess(true);\n    }\n\n    // Cancelling the fetch request in case the user navigates\n    // away from the screen\n    return () => {\n      controller.abort();\n    };\n\n    // Defining variables that trigger useFetch\n  }, [queryField, queryAttributesStr]);\n\n  // Returning useFetch response\n  return { data, success, loading };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
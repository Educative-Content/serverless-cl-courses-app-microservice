{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nexport default function useFetch(queryField, queryAttributesStr) {\n  _s();\n  // Declaring the essential state variables for data and checking\n  // if the request is loading or succeeded\n  const [data, setData] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const controller = new AbortController();\n  useEffect(() => {\n    // Changing loading and success state to true whenever there's an effect\n    setLoading(true);\n    setSuccess(false);\n\n    // Extracting data from queryAttributesStr\n    const queryAttributes = JSON.parse(queryAttributesStr);\n    function CRUDOperations(requestField, inputData, signal) {\n      console.log(inputData);\n      if (requestField === 'addCourse') {\n        const response = axios.post('http://localhost:3002/api/create/${inputData}', {\n          signal\n        });\n        if (response.status === 200) {\n          alert(\"Course Added Successfully!\");\n        } else {\n          alert(\"Action Failed.\");\n        }\n      }\n      if (requestField === 'editCourse') {\n        const response = axios.put('http://localhost:3002/api/update/{inputData.ID}', {\n          signal\n        });\n        if (response.status === 200) {\n          alert(\"Course Updated Successfully!\");\n        } else {\n          alert(\"Action Failed.\");\n        }\n      }\n      if (requestField === 'removeCourse') {\n        console.log(inputData.ID);\n        const response = axios.delete('http://localhost:3002/api/delete/${inputData.ID}', {\n          signal\n        });\n        if (response.status === 200) {\n          alert(\"Course Removed Successfully!\");\n        } else {\n          alert(\"Action Failed.\");\n        }\n      }\n    }\n\n    // asynchronous function to make API call\n    async function fetchData() {\n      try {\n        const signal = controller.signal;\n        if (queryField !== \"allCourses\") {\n          CRUDOperations(queryField, queryAttributes, signal);\n        }\n        const response = await axios.get('http://localhost:3002/api/get', {\n          signal\n        });\n\n        // Checking if the request was a success\n        if (response.status === 200) {\n          setSuccess(true);\n          setData(response); // Storing response data\n        } else {\n          const errorMessage = response.data.errorMessage || response.data.statusText;\n          throw new Error(`Status Code: ${response.status}\\nError Message: ${errorMessage}`);\n        }\n      } catch (error) {\n        console.error(error.message);\n        setData({\n          error: error.message\n        });\n        setSuccess(false);\n      } finally {\n        // Changing loading state to false whenever the API request ends in success or failure\n        setLoading(false);\n      }\n    }\n\n    // Making sure that a null field is not passed\n    if (queryField) {\n      fetchData();\n    } else {\n      setLoading(false);\n      setSuccess(true);\n    }\n\n    // Cancelling the fetch request in case the user navigates\n    // away from the screen\n    return () => {\n      controller.abort();\n    };\n\n    // Defining variables that trigger useFetch\n  }, [queryField, queryAttributesStr]);\n\n  // Returning useFetch response\n  return {\n    data,\n    success,\n    loading\n  };\n}\n_s(useFetch, \"WV32FdFC8Rv4uoPGAXVf2am2g6g=\");","map":{"version":3,"names":["useState","useEffect","axios","useFetch","queryField","queryAttributesStr","_s","data","setData","success","setSuccess","loading","setLoading","controller","AbortController","queryAttributes","JSON","parse","CRUDOperations","requestField","inputData","signal","console","log","response","post","status","alert","put","ID","delete","fetchData","get","errorMessage","statusText","Error","error","message","abort"],"sources":["/Users/Zainab/Desktop/MicroservicesLab/CRUDCourses/frontend/crud-courses/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport default function useFetch(queryField, queryAttributesStr) {\n  // Declaring the essential state variables for data and checking\n  // if the request is loading or succeeded\n  const [data, setData] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  const controller = new AbortController();\n\n  useEffect(() => {\n    // Changing loading and success state to true whenever there's an effect\n    setLoading(true);\n    setSuccess(false);\n\n    // Extracting data from queryAttributesStr\n    const queryAttributes = JSON.parse(queryAttributesStr);\n\n    function CRUDOperations(requestField, inputData, signal){\n        console.log(inputData)\n        if (requestField === 'addCourse'){\n            const response = axios.post('http://localhost:3002/api/create/${inputData}', { signal });\n            if (response.status === 200){\n                alert(\"Course Added Successfully!\");\n            }\n            else {\n                alert(\"Action Failed.\")\n            }\n        }\n        if (requestField === 'editCourse'){\n            const response = axios.put('http://localhost:3002/api/update/{inputData.ID}', { signal });\n            if (response.status === 200){\n                alert(\"Course Updated Successfully!\");\n            }\n            else {\n                alert(\"Action Failed.\")\n            }\n        }\n        if (requestField === 'removeCourse'){\n            console.log(inputData.ID);\n            const response = axios.delete('http://localhost:3002/api/delete/${inputData.ID}', { signal });\n            if (response.status === 200){\n                alert(\"Course Removed Successfully!\");\n            }\n            else {\n                alert(\"Action Failed.\")\n            }\n        }\n    }\n\n    // asynchronous function to make API call\n    async function fetchData() {\n      try {\n        const signal = controller.signal;\n\n        if (queryField !== \"allCourses\"){\n            CRUDOperations(queryField, queryAttributes, signal)\n        }\n        \n        const response = await axios.get('http://localhost:3002/api/get', { signal });\n\n        // Checking if the request was a success\n        if (response.status === 200) {\n          setSuccess(true);\n          setData(response); // Storing response data\n        } else {\n          const errorMessage = response.data.errorMessage || response.data.statusText;\n          throw new Error(`Status Code: ${response.status}\\nError Message: ${errorMessage}`);\n        }\n      } catch (error) {\n        console.error(error.message);\n        setData({ error: error.message });\n        setSuccess(false);\n      } finally {\n        // Changing loading state to false whenever the API request ends in success or failure\n        setLoading(false);\n      }\n    }\n\n    // Making sure that a null field is not passed\n    if (queryField) {\n      fetchData();\n    } else {\n      setLoading(false);\n      setSuccess(true);\n    }\n\n    // Cancelling the fetch request in case the user navigates\n    // away from the screen\n    return () => {\n      controller.abort();\n    };\n\n    // Defining variables that trigger useFetch\n  }, [queryField, queryAttributesStr]);\n\n  // Returning useFetch response\n  return { data, success, loading };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
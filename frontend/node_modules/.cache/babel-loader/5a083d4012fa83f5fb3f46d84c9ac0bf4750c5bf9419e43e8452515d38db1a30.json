{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nexport default function useFetch(queryField, queryAttributesStr) {\n  _s();\n  // Declaring the essential state variables for data and checking\n  // if the request is loading or succeeded\n  const [data, setData] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Changing loading and success state to true whenever there's an effect\n    setLoading(true);\n    setSuccess(false);\n\n    // Extracting data from queryAttributesStr\n    const queryAttributes = JSON.parse(queryAttributesStr);\n    function CRUDOperations(requestField, inputData) {\n      if (requestField === 'addCourse') {\n        axios.post(`/api/createcourse`, inputData).then(response => {\n          console.log(response);\n          if (response.status !== 200) {\n            alert(\"Server Error: Course creation failed.\");\n          }\n        }).catch(error => {\n          console.error(\"Network Error:\", error);\n          alert(\"Network Error: Course creation failed.\");\n        });\n      }\n      if (requestField === 'editCourse') {\n        axios.put(`/api/updatecourse`, inputData).then(response => {\n          if (response.status !== 200) {\n            alert(\"Server Error: Course updation failed.\");\n          }\n        }).catch(error => {\n          console.error(\"Network Error:\", error);\n          alert(\"Network Error: Course updation failed.\");\n        });\n      }\n      if (requestField === 'removeCourse') {\n        axios.delete(`/api/deletecourse/${inputData.id}`).then(response => {\n          console.log(response);\n          if (response.status !== 200) {\n            alert(\"Server Error: Course deletion failed.\");\n          }\n        }).catch(error => {\n          console.error(\"Network Error:\", error);\n        });\n      }\n    }\n\n    // asynchronous function to make API call\n    async function fetchData() {\n      try {\n        if (queryField !== \"allCourses\") {\n          await CRUDOperations(queryField, queryAttributes);\n        }\n        const response = await axios.get('/api/getcourses');\n\n        // Checking if the request was a success\n        if (response.status === 200) {\n          setSuccess(true);\n          setData(response); // Storing response data\n        } else {\n          const errorMessage = response.data.errorMessage || response.data.statusText;\n          throw new Error(`Status Code: ${response.status}\\nError Message: ${errorMessage}`);\n        }\n      } catch (error) {\n        console.error(error.message);\n        setData({\n          error: error.message\n        });\n        setSuccess(false);\n      } finally {\n        // Changing loading state to false whenever the API request ends in success or failure\n        setLoading(false);\n      }\n    }\n\n    // Making sure that a null field is not passed\n    if (queryField) {\n      fetchData();\n    } else {\n      setLoading(false);\n      setSuccess(true);\n    }\n\n    // Defining variables that trigger useFetch\n  }, [queryField, queryAttributesStr]);\n\n  // Returning useFetch response\n  return {\n    data,\n    success,\n    loading\n  };\n}\n_s(useFetch, \"WV32FdFC8Rv4uoPGAXVf2am2g6g=\");","map":{"version":3,"names":["useState","useEffect","axios","useFetch","queryField","queryAttributesStr","_s","data","setData","success","setSuccess","loading","setLoading","queryAttributes","JSON","parse","CRUDOperations","requestField","inputData","post","then","response","console","log","status","alert","catch","error","put","delete","id","fetchData","get","errorMessage","statusText","Error","message"],"sources":["/Users/Zainab/Desktop/MicroservicesLab/CRUDCourses/frontend/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport default function useFetch(queryField, queryAttributesStr) {\n  // Declaring the essential state variables for data and checking\n  // if the request is loading or succeeded\n  const [data, setData] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Changing loading and success state to true whenever there's an effect\n    setLoading(true);\n    setSuccess(false);\n\n    // Extracting data from queryAttributesStr\n    const queryAttributes = JSON.parse(queryAttributesStr);\n\n    function CRUDOperations(requestField, inputData){\n        if (requestField === 'addCourse'){\n            axios.post(`/api/createcourse`, inputData)\n            .then(response => {\n                console.log(response)\n                if (response.status !== 200) {\n                    alert(\"Server Error: Course creation failed.\");\n                }\n                })\n                .catch(error => {\n                    console.error(\"Network Error:\", error);\n                    alert(\"Network Error: Course creation failed.\");\n                });\n        }\n        if (requestField === 'editCourse'){\n            axios.put(`/api/updatecourse`, inputData)\n            .then(response => {\n                if (response.status !== 200) {\n                    alert(\"Server Error: Course updation failed.\");\n                }\n                })\n                .catch(error => {\n                    console.error(\"Network Error:\", error);\n                    alert(\"Network Error: Course updation failed.\");\n                });\n        }\n        \n        if (requestField === 'removeCourse'){\n\n            axios.delete(`/api/deletecourse/${inputData.id}`)\n            .then(response => {\n                console.log(response)\n            if (response.status !== 200) {\n                alert(\"Server Error: Course deletion failed.\");\n            }\n            })\n            .catch(error => {\n                console.error(\"Network Error:\", error);\n            });\n        }\n    }\n\n    // asynchronous function to make API call\n    async function fetchData() {\n      try {\n\n        if (queryField !== \"allCourses\"){\n            await CRUDOperations(queryField, queryAttributes)\n        }\n        \n        const response = await axios.get('/api/getcourses');\n\n        // Checking if the request was a success\n        if (response.status === 200) {\n          setSuccess(true);\n          setData(response); // Storing response data\n        } else {\n          const errorMessage = response.data.errorMessage || response.data.statusText;\n          throw new Error(`Status Code: ${response.status}\\nError Message: ${errorMessage}`);\n        }\n      } catch (error) {\n        console.error(error.message);\n        setData({ error: error.message });\n        setSuccess(false);\n      } finally {\n        // Changing loading state to false whenever the API request ends in success or failure\n        setLoading(false);\n      }\n    }\n\n    // Making sure that a null field is not passed\n    if (queryField) {\n      fetchData();\n    } else {\n      setLoading(false);\n      setSuccess(true);\n    }\n\n\n    // Defining variables that trigger useFetch\n  }, [queryField, queryAttributesStr]);\n\n  // Returning useFetch response\n  return { data, success, loading };\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAEzB,eAAe,SAASC,QAAQA,CAACC,UAAU,EAAEC,kBAAkB,EAAE;EAAAC,EAAA;EAC/D;EACA;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACAW,UAAU,CAAC,IAAI,CAAC;IAChBF,UAAU,CAAC,KAAK,CAAC;;IAEjB;IACA,MAAMG,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACV,kBAAkB,CAAC;IAEtD,SAASW,cAAcA,CAACC,YAAY,EAAEC,SAAS,EAAC;MAC5C,IAAID,YAAY,KAAK,WAAW,EAAC;QAC7Bf,KAAK,CAACiB,IAAI,CAAE,mBAAkB,EAAED,SAAS,CAAC,CACzCE,IAAI,CAACC,QAAQ,IAAI;UACdC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;UACrB,IAAIA,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;YACzBC,KAAK,CAAC,uCAAuC,CAAC;UAClD;QACA,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;UACZL,OAAO,CAACK,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;UACtCF,KAAK,CAAC,wCAAwC,CAAC;QACnD,CAAC,CAAC;MACV;MACA,IAAIR,YAAY,KAAK,YAAY,EAAC;QAC9Bf,KAAK,CAAC0B,GAAG,CAAE,mBAAkB,EAAEV,SAAS,CAAC,CACxCE,IAAI,CAACC,QAAQ,IAAI;UACd,IAAIA,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;YACzBC,KAAK,CAAC,uCAAuC,CAAC;UAClD;QACA,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;UACZL,OAAO,CAACK,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;UACtCF,KAAK,CAAC,wCAAwC,CAAC;QACnD,CAAC,CAAC;MACV;MAEA,IAAIR,YAAY,KAAK,cAAc,EAAC;QAEhCf,KAAK,CAAC2B,MAAM,CAAE,qBAAoBX,SAAS,CAACY,EAAG,EAAC,CAAC,CAChDV,IAAI,CAACC,QAAQ,IAAI;UACdC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;UACzB,IAAIA,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;YACzBC,KAAK,CAAC,uCAAuC,CAAC;UAClD;QACA,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;UACZL,OAAO,CAACK,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;QAC1C,CAAC,CAAC;MACN;IACJ;;IAEA;IACA,eAAeI,SAASA,CAAA,EAAG;MACzB,IAAI;QAEF,IAAI3B,UAAU,KAAK,YAAY,EAAC;UAC5B,MAAMY,cAAc,CAACZ,UAAU,EAAES,eAAe,CAAC;QACrD;QAEA,MAAMQ,QAAQ,GAAG,MAAMnB,KAAK,CAAC8B,GAAG,CAAC,iBAAiB,CAAC;;QAEnD;QACA,IAAIX,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;UAC3Bd,UAAU,CAAC,IAAI,CAAC;UAChBF,OAAO,CAACa,QAAQ,CAAC,CAAC,CAAC;QACrB,CAAC,MAAM;UACL,MAAMY,YAAY,GAAGZ,QAAQ,CAACd,IAAI,CAAC0B,YAAY,IAAIZ,QAAQ,CAACd,IAAI,CAAC2B,UAAU;UAC3E,MAAM,IAAIC,KAAK,CAAE,gBAAed,QAAQ,CAACG,MAAO,oBAAmBS,YAAa,EAAC,CAAC;QACpF;MACF,CAAC,CAAC,OAAON,KAAK,EAAE;QACdL,OAAO,CAACK,KAAK,CAACA,KAAK,CAACS,OAAO,CAAC;QAC5B5B,OAAO,CAAC;UAAEmB,KAAK,EAAEA,KAAK,CAACS;QAAQ,CAAC,CAAC;QACjC1B,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,SAAS;QACR;QACAE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF;;IAEA;IACA,IAAIR,UAAU,EAAE;MACd2B,SAAS,CAAC,CAAC;IACb,CAAC,MAAM;MACLnB,UAAU,CAAC,KAAK,CAAC;MACjBF,UAAU,CAAC,IAAI,CAAC;IAClB;;IAGA;EACF,CAAC,EAAE,CAACN,UAAU,EAAEC,kBAAkB,CAAC,CAAC;;EAEpC;EACA,OAAO;IAAEE,IAAI;IAAEE,OAAO;IAAEE;EAAQ,CAAC;AACnC;AAACL,EAAA,CAnGuBH,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}
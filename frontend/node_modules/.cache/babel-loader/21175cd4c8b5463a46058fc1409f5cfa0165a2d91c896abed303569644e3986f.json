{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nexport default function useFetch(queryField, queryAttributesStr) {\n  _s();\n  // Declaring the essential state variables for data and checking\n  // if the request is loading or succeeded\n  const [data, setData] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const controller = new AbortController();\n  useEffect(() => {\n    // Changing loading and success state to true whenever there's an effect\n    setLoading(true);\n    setSuccess(false);\n\n    // Extracting data from queryAttributesStr\n    const queryAttributes = JSON.parse(queryAttributesStr);\n    const options = {\n      headers: {\n        'content-type': 'text/plain'\n      }\n    };\n    function CRUDOperations(requestField, inputData, signal) {\n      if (requestField === 'addCourse') {\n        axios.post(`/api/addcourse`, inputData, options, {\n          signal\n        }).then(response => {\n          console.log(response);\n          if (response.status !== 200) {\n            alert(\"Server Error: Course creation failed.\");\n          }\n        }).catch(error => {\n          console.error(\"Network Error:\", error);\n          alert(\"Network Error: Course creation failed.\");\n        });\n      }\n      if (requestField === 'editCourse') {\n        axios.put(`/api/updatecourse`, inputData, options, {\n          signal\n        }).then(response => {\n          if (response.status !== 200) {\n            alert(\"Server Error: Course updation failed.\");\n          }\n        }).catch(error => {\n          console.error(\"Network Error:\", error);\n          alert(\"Network Error: Course updation failed.\");\n        });\n      }\n      if (requestField === 'removeCourse') {\n        axios.delete(`/api/deletecourse?id=${inputData.id}`, options, {\n          signal\n        }).then(response => {\n          console.log(response);\n          if (response.status !== 200) {\n            alert(\"Server Error: Course deletion failed.\");\n          }\n        }).catch(error => {\n          console.error(\"Network Error:\", error);\n        });\n      }\n    }\n\n    // asynchronous function to make API call\n    async function fetchData() {\n      try {\n        const signal = controller.signal;\n        if (queryField !== \"allCourses\") {\n          await CRUDOperations(queryField, queryAttributes, signal);\n        }\n        const response = await axios.get('/api/getcourses', {\n          signal\n        });\n\n        // Checking if the request was a success\n        if (response.status === 200) {\n          setSuccess(true);\n          setData(response); // Storing response data\n        } else {\n          const errorMessage = response.data.errorMessage || response.data.statusText;\n          throw new Error(`Status Code: ${response.status}\\nError Message: ${errorMessage}`);\n        }\n      } catch (error) {\n        console.error(error.message);\n        setData({\n          error: error.message\n        });\n        setSuccess(false);\n      } finally {\n        // Changing loading state to false whenever the API request ends in success or failure\n        setLoading(false);\n      }\n    }\n\n    // Making sure that a null field is not passed\n    if (queryField) {\n      fetchData();\n    } else {\n      setLoading(false);\n      setSuccess(true);\n    }\n\n    // Cancelling the fetch request in case the user navigates\n    // away from the screen\n    return () => {\n      controller.abort();\n    };\n\n    // Defining variables that trigger useFetch\n  }, [queryField, queryAttributesStr]);\n\n  // Returning useFetch response\n  return {\n    data,\n    success,\n    loading\n  };\n}\n_s(useFetch, \"WV32FdFC8Rv4uoPGAXVf2am2g6g=\");","map":{"version":3,"names":["useState","useEffect","axios","useFetch","queryField","queryAttributesStr","_s","data","setData","success","setSuccess","loading","setLoading","controller","AbortController","queryAttributes","JSON","parse","options","headers","CRUDOperations","requestField","inputData","signal","post","then","response","console","log","status","alert","catch","error","put","delete","id","fetchData","get","errorMessage","statusText","Error","message","abort"],"sources":["/Users/Zainab/Desktop/MicroservicesLab/CRUDCourses/frontend/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport default function useFetch(queryField, queryAttributesStr) {\n  // Declaring the essential state variables for data and checking\n  // if the request is loading or succeeded\n  const [data, setData] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  const controller = new AbortController();\n\n  useEffect(() => {\n    // Changing loading and success state to true whenever there's an effect\n    setLoading(true);\n    setSuccess(false);\n\n    // Extracting data from queryAttributesStr\n    const queryAttributes = JSON.parse(queryAttributesStr);\n    const options = { headers: \n        {\n            'content-type': 'text/plain'\n        }}\n\n    function CRUDOperations(requestField, inputData, signal){\n        if (requestField === 'addCourse'){\n            axios.post(`/api/addcourse`, inputData, options,  { signal }).\n            then(response => {\n                console.log(response)\n                if (response.status !== 200) {\n                    alert(\"Server Error: Course creation failed.\");\n                }\n                })\n                .catch(error => {\n                    console.error(\"Network Error:\", error);\n                    alert(\"Network Error: Course creation failed.\");\n                });\n        }\n        if (requestField === 'editCourse'){\n            axios.put(`/api/updatecourse`, inputData, options, { signal }).\n            then(response => {\n                if (response.status !== 200) {\n                    alert(\"Server Error: Course updation failed.\");\n                }\n                })\n                .catch(error => {\n                    console.error(\"Network Error:\", error);\n                    alert(\"Network Error: Course updation failed.\");\n                });\n        }\n        \n        if (requestField === 'removeCourse'){\n\n            axios.delete(`/api/deletecourse?id=${inputData.id}`, options, { signal }).\n            then(response => {\n                console.log(response)\n            if (response.status !== 200) {\n                alert(\"Server Error: Course deletion failed.\");\n            }\n            })\n            .catch(error => {\n                console.error(\"Network Error:\", error);\n            });\n        }\n    }\n\n    // asynchronous function to make API call\n    async function fetchData() {\n      try {\n        const signal = controller.signal;\n\n        if (queryField !== \"allCourses\"){\n            await CRUDOperations(queryField, queryAttributes, signal)\n        }\n        \n        const response = await axios.get('/api/getcourses', { signal });\n\n        // Checking if the request was a success\n        if (response.status === 200) {\n          setSuccess(true);\n          setData(response); // Storing response data\n        } else {\n          const errorMessage = response.data.errorMessage || response.data.statusText;\n          throw new Error(`Status Code: ${response.status}\\nError Message: ${errorMessage}`);\n        }\n      } catch (error) {\n        console.error(error.message);\n        setData({ error: error.message });\n        setSuccess(false);\n      } finally {\n        // Changing loading state to false whenever the API request ends in success or failure\n        setLoading(false);\n      }\n    }\n\n    // Making sure that a null field is not passed\n    if (queryField) {\n      fetchData();\n    } else {\n      setLoading(false);\n      setSuccess(true);\n    }\n\n    // Cancelling the fetch request in case the user navigates\n    // away from the screen\n    return () => {\n      controller.abort();\n    };\n\n    // Defining variables that trigger useFetch\n  }, [queryField, queryAttributesStr]);\n\n  // Returning useFetch response\n  return { data, success, loading };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
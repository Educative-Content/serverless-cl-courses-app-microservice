{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nexport default function useFetch(queryField, queryAttributesStr) {\n  _s();\n  // Declaring the essential state variables for data and checking\n  // if the request is loading or succeeded\n  const [data, setData] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const controller = new AbortController();\n  useEffect(() => {\n    // Changing loading and success state to true whenever there's an effect\n    setLoading(true);\n    setSuccess(false);\n\n    // Extracting data from queryAttributesStr\n    const queryAttributes = JSON.parse(queryAttributesStr);\n    function getURLQuery(requestField, inputData) {\n      const id = Math.floor(Math.random() * (999999 - 100 + 1) + 100);\n      switch (requestField) {\n        case 'getCourse':\n          return `http://localhost:3002/api/getFromId/:id`;\n        case 'addCourse':\n          return `http://localhost:3002/api/create`;\n        case 'editCourse':\n          return ``;\n        case 'removeCourse':\n          return `${lambdaFunctionUrl}?action=${requestField}&id=${inputData.id}`;\n        case 'allCourses':\n          return `http://localhost:3002/api/get`;\n        default:\n          return lambdaFunctionUrl;\n      }\n    }\n\n    // asynchronous function to make API call\n    async function fetchData() {\n      try {\n        my_sql_url = getURLQuery(queryField, queryAttributes);\n        const signal = controller.signal;\n        const response = await axios.get(\"http://localhost:3002/api/get\", {\n          signal\n        });\n        console.log(response); // Logging the response data\n\n        // Checking if the request was a success\n        if (response.status === 200) {\n          setSuccess(true);\n          setData(response.data); // Storing response data\n        } else {\n          const errorMessage = response.data.errorMessage || response.statusText;\n          throw new Error(`Status Code: ${response.status}\\nError Message: ${errorMessage}`);\n        }\n      } catch (error) {\n        console.error(error.message);\n        setData({\n          error: error.message\n        });\n        setSuccess(false);\n      } finally {\n        // Changing loading state to false whenever the API request ends in success or failure\n        setLoading(false);\n      }\n    }\n\n    // Making sure that a null field is not passed\n    if (queryField) {\n      fetchData();\n    } else {\n      setLoading(false);\n      setSuccess(true);\n    }\n\n    // Cancelling the fetch request in case the user navigates\n    // away from the screen\n    return () => {\n      controller.abort();\n    };\n\n    // Defining variables that trigger useFetch\n  }, [queryField, queryAttributesStr]);\n\n  // Returning useFetch response\n  return {\n    data,\n    success,\n    loading\n  };\n}\n_s(useFetch, \"WV32FdFC8Rv4uoPGAXVf2am2g6g=\");","map":{"version":3,"names":["useState","useEffect","axios","useFetch","queryField","queryAttributesStr","_s","data","setData","success","setSuccess","loading","setLoading","controller","AbortController","queryAttributes","JSON","parse","getURLQuery","requestField","inputData","id","Math","floor","random","lambdaFunctionUrl","fetchData","my_sql_url","signal","response","get","console","log","status","errorMessage","statusText","Error","error","message","abort"],"sources":["/Users/Zainab/Desktop/MicroservicesLab/CRUDCourses/frontend/crud-courses/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport default function useFetch(queryField, queryAttributesStr) {\n  // Declaring the essential state variables for data and checking\n  // if the request is loading or succeeded\n  const [data, setData] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  const controller = new AbortController();\n\n  useEffect(() => {\n    // Changing loading and success state to true whenever there's an effect\n    setLoading(true);\n    setSuccess(false);\n\n    // Extracting data from queryAttributesStr\n    const queryAttributes = JSON.parse(queryAttributesStr);\n\n    function getURLQuery(requestField, inputData) {\n        const id = Math.floor(Math.random() * (999999 - 100 + 1) + 100);\n        switch (requestField) {\n          case 'getCourse':\n            return `http://localhost:3002/api/getFromId/:id`;\n          case 'addCourse':\n            return `http://localhost:3002/api/create`;\n          case 'editCourse':\n            return ``;\n          case 'removeCourse':\n            return `${lambdaFunctionUrl}?action=${requestField}&id=${inputData.id}`;\n          case 'allCourses':\n            return `http://localhost:3002/api/get`;\n          default:\n            return lambdaFunctionUrl;\n        }\n      }\n\n    // asynchronous function to make API call\n    async function fetchData() {\n      try {\n        my_sql_url = getURLQuery(queryField, queryAttributes)\n        const signal = controller.signal;\n        const response = await axios.get(\"http://localhost:3002/api/get\", { signal });\n\n        console.log(response); // Logging the response data\n\n        // Checking if the request was a success\n        if (response.status === 200) {\n          setSuccess(true);\n          setData(response.data); // Storing response data\n        } else {\n          const errorMessage = response.data.errorMessage || response.statusText;\n          throw new Error(`Status Code: ${response.status}\\nError Message: ${errorMessage}`);\n        }\n      } catch (error) {\n        console.error(error.message);\n        setData({ error: error.message });\n        setSuccess(false);\n      } finally {\n        // Changing loading state to false whenever the API request ends in success or failure\n        setLoading(false);\n      }\n    }\n\n    // Making sure that a null field is not passed\n    if (queryField) {\n      fetchData();\n    } else {\n      setLoading(false);\n      setSuccess(true);\n    }\n\n    // Cancelling the fetch request in case the user navigates\n    // away from the screen\n    return () => {\n      controller.abort();\n    };\n\n    // Defining variables that trigger useFetch\n  }, [queryField, queryAttributesStr]);\n\n  // Returning useFetch response\n  return { data, success, loading };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}